// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: rpc/haberdasher/haberdasher.proto

package haberdasher

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Size is passed when requesting a new hat to be made. It's always measured in
// centimeters.
type Size struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Centimeters int32 `protobuf:"varint,1,opt,name=centimeters,proto3" json:"centimeters,omitempty"`
}

func (x *Size) Reset() {
	*x = Size{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_haberdasher_haberdasher_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Size) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Size) ProtoMessage() {}

func (x *Size) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_haberdasher_haberdasher_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Size.ProtoReflect.Descriptor instead.
func (*Size) Descriptor() ([]byte, []int) {
	return file_rpc_haberdasher_haberdasher_proto_rawDescGZIP(), []int{0}
}

func (x *Size) GetCentimeters() int32 {
	if x != nil {
		return x.Centimeters
	}
	return 0
}

// A Hat is a piece of headwear made by a Haberdasher.
type Hat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The size of a hat should always be in centimeters.
	Size int32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// The color of a hat will never be 'invisible', but other than
	// that, anything is fair game.
	Color string `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
	// The name of a hat is it's type. Like, 'bowler', or something.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Hat) Reset() {
	*x = Hat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_haberdasher_haberdasher_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hat) ProtoMessage() {}

func (x *Hat) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_haberdasher_haberdasher_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hat.ProtoReflect.Descriptor instead.
func (*Hat) Descriptor() ([]byte, []int) {
	return file_rpc_haberdasher_haberdasher_proto_rawDescGZIP(), []int{1}
}

func (x *Hat) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Hat) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Hat) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_rpc_haberdasher_haberdasher_proto protoreflect.FileDescriptor

var file_rpc_haberdasher_haberdasher_proto_rawDesc = []byte{
	0x0a, 0x21, 0x72, 0x70, 0x63, 0x2f, 0x68, 0x61, 0x62, 0x65, 0x72, 0x64, 0x61, 0x73, 0x68, 0x65,
	0x72, 0x2f, 0x68, 0x61, 0x62, 0x65, 0x72, 0x64, 0x61, 0x73, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x68, 0x61, 0x62, 0x65, 0x72, 0x64, 0x61, 0x73, 0x68, 0x65, 0x72,
	0x22, 0x28, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63,
	0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x43, 0x0a, 0x03, 0x48, 0x61,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32,
	0x44, 0x0a, 0x12, 0x48, 0x61, 0x62, 0x65, 0x72, 0x64, 0x61, 0x73, 0x68, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x4d, 0x61, 0x6b, 0x65, 0x48, 0x61, 0x74,
	0x12, 0x11, 0x2e, 0x68, 0x61, 0x62, 0x65, 0x72, 0x64, 0x61, 0x73, 0x68, 0x65, 0x72, 0x2e, 0x53,
	0x69, 0x7a, 0x65, 0x1a, 0x10, 0x2e, 0x68, 0x61, 0x62, 0x65, 0x72, 0x64, 0x61, 0x73, 0x68, 0x65,
	0x72, 0x2e, 0x48, 0x61, 0x74, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x75, 0x6c, 0x6c, 0x6f, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x68, 0x61, 0x62, 0x65, 0x72,
	0x64, 0x61, 0x73, 0x68, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_haberdasher_haberdasher_proto_rawDescOnce sync.Once
	file_rpc_haberdasher_haberdasher_proto_rawDescData = file_rpc_haberdasher_haberdasher_proto_rawDesc
)

func file_rpc_haberdasher_haberdasher_proto_rawDescGZIP() []byte {
	file_rpc_haberdasher_haberdasher_proto_rawDescOnce.Do(func() {
		file_rpc_haberdasher_haberdasher_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_haberdasher_haberdasher_proto_rawDescData)
	})
	return file_rpc_haberdasher_haberdasher_proto_rawDescData
}

var file_rpc_haberdasher_haberdasher_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_rpc_haberdasher_haberdasher_proto_goTypes = []interface{}{
	(*Size)(nil), // 0: haberdasher.Size
	(*Hat)(nil),  // 1: haberdasher.Hat
}
var file_rpc_haberdasher_haberdasher_proto_depIdxs = []int32{
	0, // 0: haberdasher.HaberdasherService.MakeHat:input_type -> haberdasher.Size
	1, // 1: haberdasher.HaberdasherService.MakeHat:output_type -> haberdasher.Hat
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_rpc_haberdasher_haberdasher_proto_init() }
func file_rpc_haberdasher_haberdasher_proto_init() {
	if File_rpc_haberdasher_haberdasher_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_haberdasher_haberdasher_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Size); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_haberdasher_haberdasher_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_haberdasher_haberdasher_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_haberdasher_haberdasher_proto_goTypes,
		DependencyIndexes: file_rpc_haberdasher_haberdasher_proto_depIdxs,
		MessageInfos:      file_rpc_haberdasher_haberdasher_proto_msgTypes,
	}.Build()
	File_rpc_haberdasher_haberdasher_proto = out.File
	file_rpc_haberdasher_haberdasher_proto_rawDesc = nil
	file_rpc_haberdasher_haberdasher_proto_goTypes = nil
	file_rpc_haberdasher_haberdasher_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HaberdasherServiceClient is the client API for HaberdasherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HaberdasherServiceClient interface {
	// MakeHat produces a hat of mysterious, randomly-selected color!
	MakeHat(ctx context.Context, in *Size, opts ...grpc.CallOption) (*Hat, error)
}

type haberdasherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHaberdasherServiceClient(cc grpc.ClientConnInterface) HaberdasherServiceClient {
	return &haberdasherServiceClient{cc}
}

func (c *haberdasherServiceClient) MakeHat(ctx context.Context, in *Size, opts ...grpc.CallOption) (*Hat, error) {
	out := new(Hat)
	err := c.cc.Invoke(ctx, "/haberdasher.HaberdasherService/MakeHat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HaberdasherServiceServer is the server API for HaberdasherService service.
type HaberdasherServiceServer interface {
	// MakeHat produces a hat of mysterious, randomly-selected color!
	MakeHat(context.Context, *Size) (*Hat, error)
}

// UnimplementedHaberdasherServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHaberdasherServiceServer struct {
}

func (*UnimplementedHaberdasherServiceServer) MakeHat(context.Context, *Size) (*Hat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeHat not implemented")
}

func RegisterHaberdasherServiceServer(s *grpc.Server, srv HaberdasherServiceServer) {
	s.RegisterService(&_HaberdasherService_serviceDesc, srv)
}

func _HaberdasherService_MakeHat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Size)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HaberdasherServiceServer).MakeHat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/haberdasher.HaberdasherService/MakeHat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HaberdasherServiceServer).MakeHat(ctx, req.(*Size))
	}
	return interceptor(ctx, in, info, handler)
}

var _HaberdasherService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "haberdasher.HaberdasherService",
	HandlerType: (*HaberdasherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeHat",
			Handler:    _HaberdasherService_MakeHat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/haberdasher/haberdasher.proto",
}
